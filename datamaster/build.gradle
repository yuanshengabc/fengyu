import org.apache.tools.ant.filters.ReplaceTokens

group 'cn.deepclue.datamaster'
version "$version"

task wrapper(type: Wrapper) {
  gradleVersion = '3.5'
  distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

apply plugin: 'java'
apply plugin: 'idea'

repositories {
    mavenCentral()
}

dependencies {
    testCompile "junit:junit:$junitVersion"
}

ext {
    // 运行和打包的环境选择, 默认是开发环境
    // 获取 gradle 参数中 -Dprofile 的值: gradle -Denv=prod clean build
    environment = System.getProperty("env", "dev")
    //dot(.) is not allow in database name, use backticks(`) also have propblem with not found `DBNAME`
    devDB = "datamaster_" + InetAddress.getLocalHost().getHostAddress().replace('.', '_')
    println "==> Load configuration for '" + environment + "'"
    println "==> Config environment, example: ./gradlew build -Denv=prod"
}

def loadConfiguration() {
    def configFile = file('config.groovy') // 配置文件
    return new ConfigSlurper(environment).parse(configFile.toURI().toURL()).toProperties()
}

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'java'
    repositories {
        maven {
            url "http://$mavenIp:8081/nexus/content/groups/public"
        }
        mavenCentral()
        maven {
            url 'http://packages.confluent.io/maven/'
        }
    }

    test {
        reports.html.destination = file("$reports.html.destination/unit")
        reports.junitXml.destination = file("$reports.junitXml.destination/unit")
    }
    sourceSets {
        integrationTest {
            java.srcDir file('src/integTest/java')
            resources.srcDir file('src/integTest/resources')
            compileClasspath = sourceSets.main.output + configurations.testRuntime
            runtimeClasspath = output + compileClasspath
        }
    }
    task integrationTest(type: Test) {
        description = 'Runs the integration tests.'
        group = 'verification'
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
        reports.html.destination = file("$reports.html.destination/integration")
        reports.junitXml.destination = file("$reports.junitXml.destination/integration")
    }

    processResources {
        // src/main/resources 下的文件中 @key@ 的内容使用 config.groovy 里对应的进行替换
        from(sourceSets.main.resources.srcDirs) {
            include '*.yml', '*.properties'
            filter(ReplaceTokens, tokens: loadConfiguration())
            if (environment == 'dev') {
                filter { String line ->
                    line.replace("/datamaster?", "/$devDB?")
                            .replace("database: datamaster", "database: $devDB")
                }
            }
        }
    }

    processIntegrationTestResources {
        if (environment == 'dev') {
            // src/main/resources 下的文件中 @key@ 的内容使用 config.groovy 里对应的进行替换
            from(sourceSets.integrationTest.resources.srcDirs) {
                include '*.yml', '*.properties'
                filter { String line ->
                    line.replace("/datamaster?", "/$devDB?")
                            .replace("database: datamaster", "database: $devDB")
                }
            }
        }
    }
}

clean {
    delete "${rootDir}/genlibs/"
}

task codeCoverageReport(type: JacocoReport) {

    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        html.enabled true
        html.destination "${buildDir}/reports/jacoco"
        csv.enabled false
    }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}
