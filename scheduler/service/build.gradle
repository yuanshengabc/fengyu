/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'magneto' at '17-7-11 下午2:14' with Gradle 2.12
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.12/userguide/tutorial_java_projects.html
 */
group 'cn.deepclue.scheduler'
version "$version"

buildscript {
    repositories {
        jcenter()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

jar {
    baseName = 'service'
    version = "$version"
}

bootRepackage {
    mainClass = 'cn.deepclue.scheduler.SchedulerService'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5' //we want gradle 3.5 to run this project
}

// In this section you declare where to find the dependencies of your project
repositories {
    maven { url "http://$mavenIp:8081/nexus/content/groups/public" }
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'cn.deepclue:deepclue-microservice-starter:0.0.1-SNAPSHOT'
    compile 'org.slf4j:slf4j-api:1.7.18'
    compile group: 'org.quartz-scheduler', name: 'quartz', version: "$quartzVersion"
    compile("org.springframework.boot:spring-boot-starter-web")
    compile "org.springframework.boot:spring-boot-starter-aop:$springBootVersion"
    compile "com.google.code.gson:gson:$gsonVersion"
    compile group: 'mysql', name: 'mysql-connector-java', version: "$mysqlDriverVersion"

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
}

jar {
    baseName = 'scheduler'
    version = "$version"
}

build {
    dependsOn 'copyJars'
}

task copyJars(type: Copy, dependsOn: jar) {
    from(jar)
    into "$rootDir/genlibs/"
}

clean {
    delete "${rootDir}/genlibs/"
}