import org.apache.tools.ant.filters.ReplaceTokens

group 'cn.deepclue.scheduler'
version "$version"

task wrapper(type: Wrapper) {
    gradleVersion = '3.5' //we want gradle 3.5 to run this project
}

apply plugin: 'java'
apply plugin: 'idea'

repositories {
    mavenCentral()
}


ext {
    // 运行和打包的环境选择, 默认是开发环境
    // 获取 gradle 参数中 -Dprofile 的值: gradle -Denv=prod clean build
    environment = System.getProperty("env", "dev")
    //dot(.) is not allow in database name, use backticks(`) also have propblem with not found `DBNAME`
    println "==> Load configuration for '" + environment + "'"
    println "==> Config environment, example: ./gradlew build -Denv=prod"
}

def loadConfiguration() {
    def configFile = file('config.groovy') // 配置文件
    return new ConfigSlurper(environment).parse(configFile.toURI().toURL()).toProperties()
}

allprojects {
    apply plugin: 'java'

    sourceSets {
        integrationTest {
            java.srcDir file('src/integTest/java')
            resources.srcDir file('src/integTest/resources')
            compileClasspath = sourceSets.main.output + configurations.testRuntime
            runtimeClasspath = output + compileClasspath
        }
    }
    task integrationTest(type: Test) {
        description = 'Runs the integration tests.'
        group = 'verification'
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
        reports.html.destination = file("$reports.html.destination/integration")
        reports.junitXml.destination = file("$reports.junitXml.destination/integration")
    }
    processResources {
        // src/main/resources 下的文件中 @key@ 的内容使用 config.groovy 里对应的进行替换
        from(sourceSets.main.resources.srcDirs) {
            include '*.yml', '*.properties'
            filter(ReplaceTokens, tokens: loadConfiguration())
        }
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    testCompile 'junit:junit:4.12'
}